// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/test_proto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2ftest_5fproto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2ftest_5fproto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2ftest_5fproto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2ftest_5fproto_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2ftest_5fproto_2eproto;
namespace experiment {
namespace dadaying {
class TestClassProto;
struct TestClassProtoDefaultTypeInternal;
extern TestClassProtoDefaultTypeInternal _TestClassProto_default_instance_;
class TestPersonProto;
struct TestPersonProtoDefaultTypeInternal;
extern TestPersonProtoDefaultTypeInternal _TestPersonProto_default_instance_;
}  // namespace dadaying
}  // namespace experiment
PROTOBUF_NAMESPACE_OPEN
template<> ::experiment::dadaying::TestClassProto* Arena::CreateMaybeMessage<::experiment::dadaying::TestClassProto>(Arena*);
template<> ::experiment::dadaying::TestPersonProto* Arena::CreateMaybeMessage<::experiment::dadaying::TestPersonProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace experiment {
namespace dadaying {

enum TestPersonProto_Type : int {
  TestPersonProto_Type_TEACHER = 0,
  TestPersonProto_Type_STUDENT = 1,
  TestPersonProto_Type_TestPersonProto_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TestPersonProto_Type_TestPersonProto_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TestPersonProto_Type_IsValid(int value);
constexpr TestPersonProto_Type TestPersonProto_Type_Type_MIN = TestPersonProto_Type_TEACHER;
constexpr TestPersonProto_Type TestPersonProto_Type_Type_MAX = TestPersonProto_Type_STUDENT;
constexpr int TestPersonProto_Type_Type_ARRAYSIZE = TestPersonProto_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestPersonProto_Type_descriptor();
template<typename T>
inline const std::string& TestPersonProto_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TestPersonProto_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TestPersonProto_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TestPersonProto_Type_descriptor(), enum_t_value);
}
inline bool TestPersonProto_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TestPersonProto_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TestPersonProto_Type>(
    TestPersonProto_Type_descriptor(), name, value);
}
// ===================================================================

class TestPersonProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:experiment.dadaying.TestPersonProto) */ {
 public:
  inline TestPersonProto() : TestPersonProto(nullptr) {}
  ~TestPersonProto() override;
  explicit PROTOBUF_CONSTEXPR TestPersonProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestPersonProto(const TestPersonProto& from);
  TestPersonProto(TestPersonProto&& from) noexcept
    : TestPersonProto() {
    *this = ::std::move(from);
  }

  inline TestPersonProto& operator=(const TestPersonProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestPersonProto& operator=(TestPersonProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestPersonProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestPersonProto* internal_default_instance() {
    return reinterpret_cast<const TestPersonProto*>(
               &_TestPersonProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestPersonProto& a, TestPersonProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TestPersonProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestPersonProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestPersonProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestPersonProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestPersonProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestPersonProto& from) {
    TestPersonProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestPersonProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "experiment.dadaying.TestPersonProto";
  }
  protected:
  explicit TestPersonProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestPersonProto_Type Type;
  static constexpr Type TEACHER =
    TestPersonProto_Type_TEACHER;
  static constexpr Type STUDENT =
    TestPersonProto_Type_STUDENT;
  static inline bool Type_IsValid(int value) {
    return TestPersonProto_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    TestPersonProto_Type_Type_MIN;
  static constexpr Type Type_MAX =
    TestPersonProto_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    TestPersonProto_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return TestPersonProto_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return TestPersonProto_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return TestPersonProto_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAgeFieldNumber = 2,
    kIsBoyFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int32 age = 2;
  bool has_age() const;
  private:
  bool _internal_has_age() const;
  public:
  void clear_age();
  int32_t age() const;
  void set_age(int32_t value);
  private:
  int32_t _internal_age() const;
  void _internal_set_age(int32_t value);
  public:

  // optional bool is_boy = 3;
  bool has_is_boy() const;
  private:
  bool _internal_has_is_boy() const;
  public:
  void clear_is_boy();
  bool is_boy() const;
  void set_is_boy(bool value);
  private:
  bool _internal_is_boy() const;
  void _internal_set_is_boy(bool value);
  public:

  // optional .experiment.dadaying.TestPersonProto.Type type = 4;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::experiment::dadaying::TestPersonProto_Type type() const;
  void set_type(::experiment::dadaying::TestPersonProto_Type value);
  private:
  ::experiment::dadaying::TestPersonProto_Type _internal_type() const;
  void _internal_set_type(::experiment::dadaying::TestPersonProto_Type value);
  public:

  // @@protoc_insertion_point(class_scope:experiment.dadaying.TestPersonProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t age_;
    bool is_boy_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ftest_5fproto_2eproto;
};
// -------------------------------------------------------------------

class TestClassProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:experiment.dadaying.TestClassProto) */ {
 public:
  inline TestClassProto() : TestClassProto(nullptr) {}
  ~TestClassProto() override;
  explicit PROTOBUF_CONSTEXPR TestClassProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestClassProto(const TestClassProto& from);
  TestClassProto(TestClassProto&& from) noexcept
    : TestClassProto() {
    *this = ::std::move(from);
  }

  inline TestClassProto& operator=(const TestClassProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestClassProto& operator=(TestClassProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestClassProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestClassProto* internal_default_instance() {
    return reinterpret_cast<const TestClassProto*>(
               &_TestClassProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestClassProto& a, TestClassProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TestClassProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestClassProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestClassProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestClassProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestClassProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestClassProto& from) {
    TestClassProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestClassProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "experiment.dadaying.TestClassProto";
  }
  protected:
  explicit TestClassProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonsFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // repeated .experiment.dadaying.TestPersonProto persons = 1;
  int persons_size() const;
  private:
  int _internal_persons_size() const;
  public:
  void clear_persons();
  ::experiment::dadaying::TestPersonProto* mutable_persons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::experiment::dadaying::TestPersonProto >*
      mutable_persons();
  private:
  const ::experiment::dadaying::TestPersonProto& _internal_persons(int index) const;
  ::experiment::dadaying::TestPersonProto* _internal_add_persons();
  public:
  const ::experiment::dadaying::TestPersonProto& persons(int index) const;
  ::experiment::dadaying::TestPersonProto* add_persons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::experiment::dadaying::TestPersonProto >&
      persons() const;

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:experiment.dadaying.TestClassProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::experiment::dadaying::TestPersonProto > persons_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ftest_5fproto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestPersonProto

// optional string name = 1;
inline bool TestPersonProto::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestPersonProto::has_name() const {
  return _internal_has_name();
}
inline void TestPersonProto::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestPersonProto::name() const {
  // @@protoc_insertion_point(field_get:experiment.dadaying.TestPersonProto.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestPersonProto::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:experiment.dadaying.TestPersonProto.name)
}
inline std::string* TestPersonProto::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:experiment.dadaying.TestPersonProto.name)
  return _s;
}
inline const std::string& TestPersonProto::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TestPersonProto::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TestPersonProto::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TestPersonProto::release_name() {
  // @@protoc_insertion_point(field_release:experiment.dadaying.TestPersonProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestPersonProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:experiment.dadaying.TestPersonProto.name)
}

// optional int32 age = 2;
inline bool TestPersonProto::_internal_has_age() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestPersonProto::has_age() const {
  return _internal_has_age();
}
inline void TestPersonProto::clear_age() {
  _impl_.age_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t TestPersonProto::_internal_age() const {
  return _impl_.age_;
}
inline int32_t TestPersonProto::age() const {
  // @@protoc_insertion_point(field_get:experiment.dadaying.TestPersonProto.age)
  return _internal_age();
}
inline void TestPersonProto::_internal_set_age(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.age_ = value;
}
inline void TestPersonProto::set_age(int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:experiment.dadaying.TestPersonProto.age)
}

// optional bool is_boy = 3;
inline bool TestPersonProto::_internal_has_is_boy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TestPersonProto::has_is_boy() const {
  return _internal_has_is_boy();
}
inline void TestPersonProto::clear_is_boy() {
  _impl_.is_boy_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool TestPersonProto::_internal_is_boy() const {
  return _impl_.is_boy_;
}
inline bool TestPersonProto::is_boy() const {
  // @@protoc_insertion_point(field_get:experiment.dadaying.TestPersonProto.is_boy)
  return _internal_is_boy();
}
inline void TestPersonProto::_internal_set_is_boy(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.is_boy_ = value;
}
inline void TestPersonProto::set_is_boy(bool value) {
  _internal_set_is_boy(value);
  // @@protoc_insertion_point(field_set:experiment.dadaying.TestPersonProto.is_boy)
}

// optional .experiment.dadaying.TestPersonProto.Type type = 4;
inline bool TestPersonProto::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TestPersonProto::has_type() const {
  return _internal_has_type();
}
inline void TestPersonProto::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::experiment::dadaying::TestPersonProto_Type TestPersonProto::_internal_type() const {
  return static_cast< ::experiment::dadaying::TestPersonProto_Type >(_impl_.type_);
}
inline ::experiment::dadaying::TestPersonProto_Type TestPersonProto::type() const {
  // @@protoc_insertion_point(field_get:experiment.dadaying.TestPersonProto.type)
  return _internal_type();
}
inline void TestPersonProto::_internal_set_type(::experiment::dadaying::TestPersonProto_Type value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.type_ = value;
}
inline void TestPersonProto::set_type(::experiment::dadaying::TestPersonProto_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:experiment.dadaying.TestPersonProto.type)
}

// -------------------------------------------------------------------

// TestClassProto

// repeated .experiment.dadaying.TestPersonProto persons = 1;
inline int TestClassProto::_internal_persons_size() const {
  return _impl_.persons_.size();
}
inline int TestClassProto::persons_size() const {
  return _internal_persons_size();
}
inline void TestClassProto::clear_persons() {
  _impl_.persons_.Clear();
}
inline ::experiment::dadaying::TestPersonProto* TestClassProto::mutable_persons(int index) {
  // @@protoc_insertion_point(field_mutable:experiment.dadaying.TestClassProto.persons)
  return _impl_.persons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::experiment::dadaying::TestPersonProto >*
TestClassProto::mutable_persons() {
  // @@protoc_insertion_point(field_mutable_list:experiment.dadaying.TestClassProto.persons)
  return &_impl_.persons_;
}
inline const ::experiment::dadaying::TestPersonProto& TestClassProto::_internal_persons(int index) const {
  return _impl_.persons_.Get(index);
}
inline const ::experiment::dadaying::TestPersonProto& TestClassProto::persons(int index) const {
  // @@protoc_insertion_point(field_get:experiment.dadaying.TestClassProto.persons)
  return _internal_persons(index);
}
inline ::experiment::dadaying::TestPersonProto* TestClassProto::_internal_add_persons() {
  return _impl_.persons_.Add();
}
inline ::experiment::dadaying::TestPersonProto* TestClassProto::add_persons() {
  ::experiment::dadaying::TestPersonProto* _add = _internal_add_persons();
  // @@protoc_insertion_point(field_add:experiment.dadaying.TestClassProto.persons)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::experiment::dadaying::TestPersonProto >&
TestClassProto::persons() const {
  // @@protoc_insertion_point(field_list:experiment.dadaying.TestClassProto.persons)
  return _impl_.persons_;
}

// optional string name = 2;
inline bool TestClassProto::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestClassProto::has_name() const {
  return _internal_has_name();
}
inline void TestClassProto::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestClassProto::name() const {
  // @@protoc_insertion_point(field_get:experiment.dadaying.TestClassProto.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestClassProto::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:experiment.dadaying.TestClassProto.name)
}
inline std::string* TestClassProto::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:experiment.dadaying.TestClassProto.name)
  return _s;
}
inline const std::string& TestClassProto::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TestClassProto::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TestClassProto::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TestClassProto::release_name() {
  // @@protoc_insertion_point(field_release:experiment.dadaying.TestClassProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestClassProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:experiment.dadaying.TestClassProto.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dadaying
}  // namespace experiment

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::experiment::dadaying::TestPersonProto_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::experiment::dadaying::TestPersonProto_Type>() {
  return ::experiment::dadaying::TestPersonProto_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2ftest_5fproto_2eproto
