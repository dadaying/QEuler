// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/test_proto.proto

#include "proto/test_proto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace experiment {
namespace dadaying {
PROTOBUF_CONSTEXPR TestPersonProto::TestPersonProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.age_)*/0
  , /*decltype(_impl_.is_boy_)*/false
  , /*decltype(_impl_.type_)*/0} {}
struct TestPersonProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestPersonProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestPersonProtoDefaultTypeInternal() {}
  union {
    TestPersonProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestPersonProtoDefaultTypeInternal _TestPersonProto_default_instance_;
PROTOBUF_CONSTEXPR TestClassProto::TestClassProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.persons_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct TestClassProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestClassProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestClassProtoDefaultTypeInternal() {}
  union {
    TestClassProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestClassProtoDefaultTypeInternal _TestClassProto_default_instance_;
}  // namespace dadaying
}  // namespace experiment
static ::_pb::Metadata file_level_metadata_proto_2ftest_5fproto_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_proto_2ftest_5fproto_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proto_2ftest_5fproto_2eproto = nullptr;

const uint32_t TableStruct_proto_2ftest_5fproto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::experiment::dadaying::TestPersonProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::experiment::dadaying::TestPersonProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::experiment::dadaying::TestPersonProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::experiment::dadaying::TestPersonProto, _impl_.age_),
  PROTOBUF_FIELD_OFFSET(::experiment::dadaying::TestPersonProto, _impl_.is_boy_),
  PROTOBUF_FIELD_OFFSET(::experiment::dadaying::TestPersonProto, _impl_.type_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::experiment::dadaying::TestClassProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::experiment::dadaying::TestClassProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::experiment::dadaying::TestClassProto, _impl_.persons_),
  PROTOBUF_FIELD_OFFSET(::experiment::dadaying::TestClassProto, _impl_.name_),
  ~0u,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::experiment::dadaying::TestPersonProto)},
  { 14, 22, -1, sizeof(::experiment::dadaying::TestClassProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::experiment::dadaying::_TestPersonProto_default_instance_._instance,
  &::experiment::dadaying::_TestClassProto_default_instance_._instance,
};

const char descriptor_table_protodef_proto_2ftest_5fproto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026proto/test_proto.proto\022\023experiment.dad"
  "aying\"\320\001\n\017TestPersonProto\022\021\n\004name\030\001 \001(\tH"
  "\000\210\001\001\022\020\n\003age\030\002 \001(\005H\001\210\001\001\022\023\n\006is_boy\030\003 \001(\010H\002"
  "\210\001\001\022<\n\004type\030\004 \001(\0162).experiment.dadaying."
  "TestPersonProto.TypeH\003\210\001\001\" \n\004Type\022\013\n\007TEA"
  "CHER\020\000\022\013\n\007STUDENT\020\001B\007\n\005_nameB\006\n\004_ageB\t\n\007"
  "_is_boyB\007\n\005_type\"c\n\016TestClassProto\0225\n\007pe"
  "rsons\030\001 \003(\0132$.experiment.dadaying.TestPe"
  "rsonProto\022\021\n\004name\030\002 \001(\tH\000\210\001\001B\007\n\005_nameb\006p"
  "roto3"
  ;
static ::_pbi::once_flag descriptor_table_proto_2ftest_5fproto_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2ftest_5fproto_2eproto = {
    false, false, 365, descriptor_table_protodef_proto_2ftest_5fproto_2eproto,
    "proto/test_proto.proto",
    &descriptor_table_proto_2ftest_5fproto_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_proto_2ftest_5fproto_2eproto::offsets,
    file_level_metadata_proto_2ftest_5fproto_2eproto, file_level_enum_descriptors_proto_2ftest_5fproto_2eproto,
    file_level_service_descriptors_proto_2ftest_5fproto_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2ftest_5fproto_2eproto_getter() {
  return &descriptor_table_proto_2ftest_5fproto_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto_2ftest_5fproto_2eproto(&descriptor_table_proto_2ftest_5fproto_2eproto);
namespace experiment {
namespace dadaying {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestPersonProto_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2ftest_5fproto_2eproto);
  return file_level_enum_descriptors_proto_2ftest_5fproto_2eproto[0];
}
bool TestPersonProto_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TestPersonProto_Type TestPersonProto::TEACHER;
constexpr TestPersonProto_Type TestPersonProto::STUDENT;
constexpr TestPersonProto_Type TestPersonProto::Type_MIN;
constexpr TestPersonProto_Type TestPersonProto::Type_MAX;
constexpr int TestPersonProto::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class TestPersonProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TestPersonProto>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_age(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_boy(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

TestPersonProto::TestPersonProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:experiment.dadaying.TestPersonProto)
}
TestPersonProto::TestPersonProto(const TestPersonProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestPersonProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.age_){}
    , decltype(_impl_.is_boy_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.age_, &from._impl_.age_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.age_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:experiment.dadaying.TestPersonProto)
}

inline void TestPersonProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.age_){0}
    , decltype(_impl_.is_boy_){false}
    , decltype(_impl_.type_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestPersonProto::~TestPersonProto() {
  // @@protoc_insertion_point(destructor:experiment.dadaying.TestPersonProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestPersonProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void TestPersonProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestPersonProto::Clear() {
// @@protoc_insertion_point(message_clear_start:experiment.dadaying.TestPersonProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.age_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.age_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestPersonProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "experiment.dadaying.TestPersonProto.name"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 age = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_age(&has_bits);
          _impl_.age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_boy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_boy(&has_bits);
          _impl_.is_boy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .experiment.dadaying.TestPersonProto.Type type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::experiment::dadaying::TestPersonProto_Type>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestPersonProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:experiment.dadaying.TestPersonProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string name = 1;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "experiment.dadaying.TestPersonProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int32 age = 2;
  if (_internal_has_age()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_age(), target);
  }

  // optional bool is_boy = 3;
  if (_internal_has_is_boy()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_boy(), target);
  }

  // optional .experiment.dadaying.TestPersonProto.Type type = 4;
  if (_internal_has_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:experiment.dadaying.TestPersonProto)
  return target;
}

size_t TestPersonProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:experiment.dadaying.TestPersonProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 age = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_age());
    }

    // optional bool is_boy = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional .experiment.dadaying.TestPersonProto.Type type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestPersonProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestPersonProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestPersonProto::GetClassData() const { return &_class_data_; }


void TestPersonProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestPersonProto*>(&to_msg);
  auto& from = static_cast<const TestPersonProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:experiment.dadaying.TestPersonProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.age_ = from._impl_.age_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.is_boy_ = from._impl_.is_boy_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestPersonProto::CopyFrom(const TestPersonProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:experiment.dadaying.TestPersonProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestPersonProto::IsInitialized() const {
  return true;
}

void TestPersonProto::InternalSwap(TestPersonProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestPersonProto, _impl_.type_)
      + sizeof(TestPersonProto::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(TestPersonProto, _impl_.age_)>(
          reinterpret_cast<char*>(&_impl_.age_),
          reinterpret_cast<char*>(&other->_impl_.age_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestPersonProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ftest_5fproto_2eproto_getter, &descriptor_table_proto_2ftest_5fproto_2eproto_once,
      file_level_metadata_proto_2ftest_5fproto_2eproto[0]);
}

// ===================================================================

class TestClassProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TestClassProto>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestClassProto::TestClassProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:experiment.dadaying.TestClassProto)
}
TestClassProto::TestClassProto(const TestClassProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestClassProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.persons_){from._impl_.persons_}
    , decltype(_impl_.name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:experiment.dadaying.TestClassProto)
}

inline void TestClassProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.persons_){arena}
    , decltype(_impl_.name_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestClassProto::~TestClassProto() {
  // @@protoc_insertion_point(destructor:experiment.dadaying.TestClassProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestClassProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.persons_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void TestClassProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestClassProto::Clear() {
// @@protoc_insertion_point(message_clear_start:experiment.dadaying.TestClassProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.persons_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestClassProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .experiment.dadaying.TestPersonProto persons = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_persons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "experiment.dadaying.TestClassProto.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestClassProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:experiment.dadaying.TestClassProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .experiment.dadaying.TestPersonProto persons = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_persons_size()); i < n; i++) {
    const auto& repfield = this->_internal_persons(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string name = 2;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "experiment.dadaying.TestClassProto.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:experiment.dadaying.TestClassProto)
  return target;
}

size_t TestClassProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:experiment.dadaying.TestClassProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .experiment.dadaying.TestPersonProto persons = 1;
  total_size += 1UL * this->_internal_persons_size();
  for (const auto& msg : this->_impl_.persons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string name = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestClassProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestClassProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestClassProto::GetClassData() const { return &_class_data_; }


void TestClassProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestClassProto*>(&to_msg);
  auto& from = static_cast<const TestClassProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:experiment.dadaying.TestClassProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.persons_.MergeFrom(from._impl_.persons_);
  if (from._internal_has_name()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestClassProto::CopyFrom(const TestClassProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:experiment.dadaying.TestClassProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestClassProto::IsInitialized() const {
  return true;
}

void TestClassProto::InternalSwap(TestClassProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.persons_.InternalSwap(&other->_impl_.persons_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TestClassProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ftest_5fproto_2eproto_getter, &descriptor_table_proto_2ftest_5fproto_2eproto_once,
      file_level_metadata_proto_2ftest_5fproto_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace dadaying
}  // namespace experiment
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::experiment::dadaying::TestPersonProto*
Arena::CreateMaybeMessage< ::experiment::dadaying::TestPersonProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::experiment::dadaying::TestPersonProto >(arena);
}
template<> PROTOBUF_NOINLINE ::experiment::dadaying::TestClassProto*
Arena::CreateMaybeMessage< ::experiment::dadaying::TestClassProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::experiment::dadaying::TestClassProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
